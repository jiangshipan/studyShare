package com.jsp.studyShare.Service;import com.jsp.studyShare.Dao.DataDao;import com.jsp.studyShare.Dao.EmailDao;import com.jsp.studyShare.Dao.TokenDao;import com.jsp.studyShare.Dao.UserDao;import com.jsp.studyShare.model.*;import com.jsp.studyShare.utils.HttpUtil;import com.jsp.studyShare.utils.JsonUtil;import com.jsp.studyShare.utils.WeChatGetUserUtil;import com.jsp.studyShare.utils.studyShareUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import org.springframework.util.StringUtils;import java.util.*;@Servicepublic class UserService {    @Autowired    private UserDao userDAO;    @Autowired    private TokenDao tokenDAO;    @Autowired    private DataDao dataDAO;    @Autowired    private EmailDao emailDAO;    @Autowired    private HostHolder hostHolder;    public Map<String ,String> userLogin(String username, String password, String ip) {        Map<String, String> map = new HashMap<>();        if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) {            map.put("msg","用户名或密码不能为空");            return map;        }        //验证身份合法性        User user = userDAO.getUserByUsername(username);        if (!studyShareUtil.MD5(password + user.getSalt()).equals(user.getPassword())) {            map.put("msg", "密码不正确");            return map;        }        if (user.getStatus() == 0) {            map.put("msg", "您的账号已经被禁用");            return map;        }        //登陆成功 下发tokens        String tokens = addLoginToken(user.getOpenid(), ip);        map.put("tokens",tokens);        return map;    }    /**     * 得到用户信息并存储  (小程序端使用)     * @param encryptedData     * @param iv     * @param code     */    public String getUser(String encryptedData, String iv, String code) {        MultiValueMap<String, String> map = new LinkedMultiValueMap<>();        map.add("appid","wxa4806a4aa0b45164");        map.add("secret","3d4b209864712040997477edec5deba0");        map.add("js_code",code);        map.add("grant_type","authorization_code");        String str = HttpUtil.sendGetRequest("https://api.weixin.qq.com/sns/jscode2session", map);        Map<String, String> resultMap = JsonUtil.strToMap(str);        String openid = resultMap.get("openid");        String session_key = resultMap.get("seesion_key");        if (!(StringUtils.isEmpty(openid) || StringUtils.isEmpty(session_key))) {            //解密用户信息            String userInfo = WeChatGetUserUtil.getUserInfo(encryptedData, session_key, iv);            Map<String, String> userInfoMap = JsonUtil.strToMap(userInfo);            //根据openid查询数据库是否存在该用户信息,存在则直接登陆            User user = userDAO.getUserById(openid);            if (user == null) {                //如果不存在，则写入数据库                user = new User();                user.setOpenid(openid);                user.setNickname(userInfoMap.get("nickname"));                user.setAvatarUrl(userInfoMap.get("avatarUrl"));                if (userInfoMap.get("gender") != null) {                    user.setGender(Integer.parseInt(userInfoMap.get("gender")));                }                user.setCountry(userInfoMap.get("country"));                user.setProvince(userInfoMap.get("province"));                user.setCity(userInfoMap.get("city"));                //默认可用                user.setStatus(1);                userDAO.addUser(user);            }            //下发token            //String tokens = addLoginToken(user.getOpenid());            //return tokens;        }        return null;    }    /**     * 给用户下发token     */    public String addLoginToken(String openid, String ip) {        Token token = new Token();        token.setOpenid(openid);        token.setStatus(1);        token.setTokens(UUID.randomUUID().toString().replaceAll("-","") + "user" + ip);        //设置有效期 一天        Date date = new Date();        date.setTime(date.getTime() + 1000 * 3600 * 24);        token.setExpired(date);        tokenDAO.addToken(token);        return token.getTokens();    }    public ResponseUser getUserInfo() {        User user = hostHolder.getUser();        ResponseUser respUser = new ResponseUser();        respUser.setNickname(user.getNickname());        respUser.setGender(user.getGender());        respUser.setCountry(user.getCountry());        respUser.setProvince(user.getProvince());        respUser.setCity(user.getCity());        respUser.setAvatarUrl(user.getAvatarUrl());        String[] collection = null;        String[] uploaded = null;        String[] downloaded = null;        List<ResponseData> collectionList = null;        List<ResponseData> uploadedList = null;        List<ResponseData> downloadedList = null;        if (user.getCollection() != null) {            collection = user.getCollection().split("-");            collectionList = getResponseData(collection);        }        if (user.getUploaded() != null) {           uploaded = user.getUploaded().split("-");           uploadedList = getResponseData(uploaded);        }        if (user.getDownloaded() != null) {           downloaded = user.getDownloaded().split("-");           downloadedList = getResponseData(downloaded);        }        respUser.setCollection(collectionList);        respUser.setUploaded(uploadedList);        respUser.setDownloaded(downloadedList);        return respUser;    }    public void logout(String auth_token) {        //修改token为禁用        tokenDAO.updateStatus(auth_token, 0);    }    public List<ResponseData> getResponseData(String[] result) {        List<ResponseData> list = new ArrayList<>();        List resultList = Arrays.asList(result);        Set set = new HashSet(resultList);        result = (String[]) set.toArray(new String[0]);        for (String s : result) {            //根据s查询出 data 封装到responsedata            Data data1 = dataDAO.findDataByDid(Integer.parseInt(s), 1);            ResponseData responseData = new ResponseData();            responseData.setDid(data1.getDid());            responseData.setCid(data1.getCid());            responseData.setUploadTime(data1.getUploadTime());            User userById = userDAO.getUserById(data1.getOpenid());            responseData.setNickname(userById.getNickname());            responseData.setDataName(data1.getDataName());            responseData.setDataDesc(data1.getDataDesc());            responseData.setDataFile(data1.getDataFile());            list.add(responseData);        }        return list;    }    public Map<String ,String > userRegister(String jsonStr) {        HashMap<String, String> map = new HashMap<>();        Map<String, String> userMap = JsonUtil.strToMap(jsonStr);        String username = userMap.get("username");        String password = userMap.get("password");        String nickname = userMap.get("nickname");        String gender = userMap.get("gender");        String avatarUrl = userMap.get("avatarUrl");        String country = userMap.get("country");        String province = userMap.get("province");        String city = userMap.get("city");        if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) {            map.put("msg","用户名和密码不能为空");            return map;        }        if (StringUtils.isEmpty(gender)) {            map.put("msg","性别不能为空");            return map;        }        String email = userMap.get("email");        if (StringUtils.isEmpty(email)) {            map.put("msg","邮箱不能为空");            return map;        }        User user = userDAO.getUserByUsername(username);        if (user != null) {            map.put("msg", "用户名已经存在");        }        user = new User();        user.setOpenid(UUID.randomUUID().toString().replaceAll("-",""));        user.setUsername(username);        user.setSalt(UUID.randomUUID().toString().substring(0, 5));        user.setPassword(studyShareUtil.MD5(password + user.getSalt()));        user.setNickname(nickname);        user.setGender(Integer.parseInt(gender));        user.setAvatarUrl(avatarUrl);        user.setCountry(country);        user.setProvince(province);        user.setCity(city);        user.setStatus(1);        userDAO.addUser(user);        //绑定邮箱        emailDAO.fixEmail(user.getOpenid(), email);        map.put("msg", "注册成功");        return map;    }}