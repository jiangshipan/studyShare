package com.jsp.studyShare.controller;import com.jsp.studyShare.Service.UserService;import com.jsp.studyShare.model.HostHolder;import com.jsp.studyShare.model.Response;import com.jsp.studyShare.model.ResponseUser;import org.apache.ibatis.annotations.Param;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import javax.net.ssl.HttpsURLConnection;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.Map;@RequestMapping("/user")@Controllerpublic class UserController {    private static final Logger logger = LoggerFactory.getLogger(UserController.class);    @Autowired    private UserService userService;//    /**//     * 微信小程序端登陆接口//     * @param encryptedData//     * @param iv//     * @param code//     * @param response//     * @return//     *///    @RequestMapping(path = "/wxlogin", method = {RequestMethod.GET})//    @ResponseBody//    public Response login(String encryptedData, String iv, @RequestParam("code") String code,//                          HttpServletResponse response) {//       try {//           System.out.println("code:" + code);////           String tokens = userService.getUser(encryptedData, iv, code);//           if (tokens != null) {//               Cookie cookie = new Cookie("auth_token",tokens);//               cookie.setPath("/");//               response.addCookie(cookie);//               return new Response(0, "登陆成功");//           }//           return  new Response(1, "登陆失败");//       } catch (Exception e) {//           logger.error("login error:", e);//           return new Response(1, "登陆失败");//       }////    }    /**     * 移动端，web端登陆     * @param username     * @param password     * @param request     * @param response     * @return     */    @RequestMapping(path = "/login", method = {RequestMethod.GET})    @ResponseBody    public Response userLogin(@Param("username") String username, @RequestParam("password") String password,                              @Param("email") String email, HttpServletRequest request, HttpServletResponse response) {        try {            String userIp = "";            if (request.getHeader("x-forwarded-for") == null) {                userIp = request.getRemoteAddr();            } else {                userIp = request.getHeader("x-forwarded-for");            }            Map<String,String> map;            if (email == null) {                map = userService.userLogin(username, password, userIp);            } else {                map = userService.userLogin2(email, password, userIp);            }            if (map.get("tokens") != null) {                Cookie cookie = new Cookie("auth_token",map.get("tokens"));                cookie.setPath("/");                response.addCookie(cookie);                return new Response(0, "登陆成功");            }            return new Response(1, map.get("msg"));        } catch (Exception e) {            logger.error("userLogin error:", e);            return new Response(1, "登陆失败");        }    }    /**     * 用户注册     * @param jsonStr     * @return     */    @RequestMapping(path = "/reg", method = {RequestMethod.POST})    @ResponseBody    public Response register(@RequestBody String jsonStr) {        try {            Map<String,String> map = userService.userRegister(jsonStr);            if (map.get("msg").equals("注册成功")) {                return new Response(0, map.get("msg"));            }            return new Response(1, map.get("msg"));        } catch (Exception e) {            logger.error("register error:",e);            return new Response(1, "注册失败");        }    }    /**     * 获取当前用户的信息     * @return     */    @RequestMapping("/get")    @ResponseBody    public Response getUserInfo() {        try {            ResponseUser userInfo = userService.getUserInfo();            return new Response(0, "获取成功", userInfo);        } catch (Exception e) {            logger.error("getUserInfo error:", e);            return new Response(1, "获取失败");        }    }    @RequestMapping("/logout")    @ResponseBody    public Response logout(@CookieValue("auth_token") String auth_token) {        try {            userService.logout(auth_token);            return new Response(0, "退出成功");        } catch (Exception e) {            logger.error("logout error:", e);            return new Response(1, "退出失败");        }    }    @RequestMapping("/test")    public void test() {        try {            String str = null;            int i = Integer.parseInt(str);        } catch (Exception e) {            e.printStackTrace();            logger.error("error:", e);        }    }}